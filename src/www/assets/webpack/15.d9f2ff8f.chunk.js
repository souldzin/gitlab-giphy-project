(this.webpackJsonp=this.webpackJsonp||[]).push([[15],{"/3A2":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateIssueConfidential"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"IssueSetConfidentialInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetConfidential"},name:{kind:"Name",value:"issueSetConfidential"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"confidential"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:209}};n.loc.source={body:"mutation updateIssueConfidential($input: IssueSetConfidentialInput!) {\n  issuableSetConfidential: issueSetConfidential(input: $input) {\n    issuable: issue {\n      id\n      confidential\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.updateIssueConfidential=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"updateIssueConfidential")},"0ddK":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicDueDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateIsFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateFromMilestones"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:262}};n.loc.source={body:"query epicDueDate($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: epic(iid: $iid) {\n      __typename\n      id\n      dueDate\n      dueDateIsFixed\n      dueDateFixed\n      dueDateFromMilestones\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicDueDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicDueDate")},"0z+q":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicStartDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateIsFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateFromMilestones"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:272}};n.loc.source={body:"query epicStartDate($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: epic(iid: $iid) {\n      __typename\n      id\n      startDate\n      startDateIsFixed\n      startDateFixed\n      startDateFromMilestones\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicStartDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicStartDate")},"1XfR":function(e,i,n){var a={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"AlertNote"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Note"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"author"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"state"},arguments:[],directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"Author"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"body"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"bodyHtml"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"createdAt"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"discussion"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"systemNoteIconName"},arguments:[],directives:[]}]}}],loc:{start:0,end:196}};a.loc.source={body:'#import "./author.fragment.graphql"\n\nfragment AlertNote on Note {\n  id\n  author {\n    id\n    state\n    ...Author\n  }\n  body\n  bodyHtml\n  createdAt\n  discussion {\n    id\n  }\n  systemNoteIconName\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("TgHV").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))),e.exports=a},"1e8H":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"mergeRequestSetLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"MergeRequestSetLabelsInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableLabels"},name:{kind:"Name",value:"mergeRequestSetLabels"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"color"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"description"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:310}};n.loc.source={body:"mutation mergeRequestSetLabels($input: MergeRequestSetLabelsInput!) {\n  updateIssuableLabels: mergeRequestSetLabels(input: $input) {\n    errors\n    issuable: mergeRequest {\n      id\n      labels {\n        nodes {\n          color\n          description\n          id\n          title\n        }\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestSetLabels=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestSetLabels")},"2x97":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateIssuableConfidential"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateEpicInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetConfidential"},name:{kind:"Name",value:"updateEpic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"confidential"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:191}};n.loc.source={body:"mutation updateIssuableConfidential($input: UpdateEpicInput!) {\n  issuableSetConfidential: updateEpic(input: $input) {\n    issuable: epic {\n      id\n      confidential\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.updateIssuableConfidential=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"updateIssuableConfidential")},"4uVt":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"issuableTodoMarkDone"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"TodoMarkDoneInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"todoMutation"},name:{kind:"Name",value:"todoMarkDone"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"todo"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:164}};n.loc.source={body:"mutation issuableTodoMarkDone($input: TodoMarkDoneInput!) {\n  todoMutation: todoMarkDone(input: $input) {\n    __typename\n    todo {\n      id\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issuableTodoMarkDone=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issuableTodoMarkDone")},"5V93":function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"mergeRequestSetAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"mergeRequestSetAssignees"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"assigneeUsernames"},value:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}}},{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"mergeRequest"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}},{kind:"Field",name:{kind:"Name",value:"participants"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:596}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nmutation mergeRequestSetAssignees($iid: String!, $assigneeUsernames: [String!]!, $fullPath: ID!) {\n  mergeRequestSetAssignees(\n    input: { iid: $iid, assigneeUsernames: $assigneeUsernames, projectPath: $fullPath }\n  ) {\n    mergeRequest {\n      id\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n      participants {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.mergeRequestSetAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"mergeRequestSetAssignees")},"5ee2":function(e,i,n){"use strict";n.d(i,"a",(function(){return ei})),n.d(i,"j",(function(){return ii})),n.d(i,"m",(function(){return ni})),n.d(i,"f",(function(){return ai})),n.d(i,"p",(function(){return ti})),n.d(i,"g",(function(){return di})),n.d(i,"q",(function(){return ri})),n.d(i,"x",(function(){return li})),n.d(i,"o",(function(){return si})),n.d(i,"i",(function(){return oi})),n.d(i,"h",(function(){return ui})),n.d(i,"s",(function(){return mi})),n.d(i,"e",(function(){return ci})),n.d(i,"t",(function(){return fi})),n.d(i,"l",(function(){return vi})),n.d(i,"r",(function(){return ki})),n.d(i,"u",(function(){return pi})),n.d(i,"c",(function(){return bi})),n.d(i,"b",(function(){return gi})),n.d(i,"n",(function(){return hi})),n.d(i,"w",(function(){return yi})),n.d(i,"d",(function(){return Di})),n.d(i,"v",(function(){return Fi})),n.d(i,"k",(function(){return Ei}));var a=n("t9l/"),t=n("il++"),d=n.n(t),r=n("mpzd"),l=n("/LsX"),s=n("PEAp"),o=n.n(s),u=n("0ddK"),m=n.n(u),c=n("tB5k"),f=n.n(c),v=n("wSUX"),k=n.n(v),p=n("0z+q"),S=n.n(p),N=n("Bml2"),b=n.n(N),g=n("eO/Q"),h=n.n(g),y=n("wMWn"),D=n.n(y),F=n("MIX8"),E=n.n(F),w=n("GSV/"),V=n.n(w),T=n("paIi"),q=n.n(T),P=n("Ngt0"),_=n.n(P),I=n("AHEt"),A=n.n(I),O=n("bpen"),$=n.n(O),x=n("Dwpb"),j=n.n(x),L=n("pKR4"),R=n.n(L),M=n("mawF"),U=n.n(M),G=n("mxyH"),Q=n.n(G),z=n("9d0U"),C=n.n(z),H=n("EPAg"),B=n.n(H),X=n("4uVt"),J=n.n(X),Y=n("2x97"),W=n.n(Y),K=n("sg9S"),Z=n.n(K),ee=n("ZMa4"),ie=n.n(ee),ne=n("358B"),ae=n.n(ne),te=n("/3A2"),de=n.n(te),re=n("NM/P"),le=n.n(re),se=n("es8a"),oe=n.n(se),ue=n("lUSz"),me=n.n(ue),ce=n("1e8H"),fe=n.n(ce),ve=n("MHQH"),ke=n.n(ve),pe=n("nQ35"),Se=n.n(pe),Ne=n("IuCd"),be=n.n(Ne),ge=n("bc8f"),he=n.n(ge),ye=n("tSSo"),De=n.n(ye),Fe=n("MPHe"),Ee=n.n(Fe),we=n("m9sB"),Ve=n.n(we),Te=n("U0nB"),qe=n.n(Te),Pe=n("QVnT"),_e=n.n(Pe),Ie=n("KGGv"),Ae=n.n(Ie),Oe=n("VW3Q"),$e=n.n(Oe),xe=n("QYdl"),je=n.n(xe),Le=n("sJJu"),Re=n.n(Le),Me=n("csG4"),Ue=n.n(Me),Ge=n("V85p"),Qe=n.n(Ge),ze=n("RWen"),Ce=n.n(ze),He=n("5V93"),Be=n.n(He),Xe=n("y9w6"),Je=n.n(Xe),Ye=n("adGk"),We=n.n(Ye),Ke=n("iuSE"),Ze=n.n(Ke);const ei=l.h,ii="TITLE_ASC",ni=/^&(?<iid>\d+)$/,ai={[r.c.Issue]:{query:Ae.a,subscription:D.a,mutation:Ce.a},[r.c.MergeRequest]:{query:Re.a,mutation:Be.a},[r.c.Alert]:{query:_e.a,mutation:Se.a}},ti={[r.c.Issue]:{query:$e.a},[r.c.MergeRequest]:{query:Ue.a},[r.c.Epic]:{query:f.a},[r.c.Alert]:{query:"",skipQuery:!0}},di={[r.c.Issue]:{query:E.a,mutation:de.a},[r.c.Epic]:{query:o.a,mutation:W.a}},ri={[r.c.Issue]:{query:q.a},[r.c.MergeRequest]:{query:R.a},[r.c.Epic]:{query:k.a}},li={[r.e.project]:{query:qe.a},[r.e.group]:{query:De.a}},si={[r.c.Issue]:{issuableQuery:Ee.a,mutation:d.a,mutationName:"updateIssue"},[r.c.MergeRequest]:{issuableQuery:Ve.a,mutation:fe.a,mutationName:"mergeRequestSetLabels"},[r.c.Epic]:{issuableQuery:be.a,mutation:he.a,mutationName:"updateEpic"}},oi={start:"startDate",due:"dueDate"},ui={[oi.start]:{isDateFixed:"startDateIsFixed",dateFixed:"startDateFixed",dateFromMilestones:"startDateFromMilestones"},[oi.due]:{isDateFixed:"dueDateIsFixed",dateFixed:"dueDateFixed",dateFromMilestones:"dueDateFromMilestones"}},mi={[r.c.Issue]:{query:_.a,mutation:oe.a},[r.c.Epic]:{query:b.a,mutation:ae.a},[r.c.MergeRequest]:{query:U.a,mutation:ke.a}},ci={editEvent:"click_edit_button",rightSidebarLabel:"right_sidebar"},fi={[r.c.Issue]:{query:A.a},[r.c.MergeRequest]:{query:Q.a}},vi={[r.c.Issue]:{query:V.a,mutation:le.a},[r.c.Epic]:{query:m.a,mutation:Z.a}},ki={[r.c.Epic]:{query:S.a,mutation:ie.a}},pi={[r.c.Issue]:{query:je.a},[r.c.MergeRequest]:{query:Qe.a}},Si={[r.c.Issue]:{query:We.a,mutation:Je.a},[r.c.MergeRequest]:{query:j.a,mutation:me.a}},Ni={[r.c.Issue]:{query:Ze.a},[r.c.MergeRequest]:{query:Ze.a}},bi={Milestone:"milestone"},gi={[bi.Milestone]:"active"},hi={[bi.Milestone]:{current:Si,list:Ni}},yi={[r.c.Epic]:{query:h.a},[r.c.Issue]:{query:$.a},[r.c.MergeRequest]:{query:C.a}},Di={Create:"create",MarkDone:"mark-done"},Fi={[Di.Create]:B.a,[Di.MarkDone]:J.a};function Ei(e,i){return{noAttribute:Object(a.h)(Object(a.g)("DropdownWidget|No %{issuableAttribute}"),{issuableAttribute:e}),assignAttribute:Object(a.h)(Object(a.g)("DropdownWidget|Assign %{issuableAttribute}"),{issuableAttribute:e}),noAttributesFound:Object(a.h)(Object(a.g)("DropdownWidget|No %{issuableAttribute} found"),{issuableAttribute:e}),updateError:Object(a.h)(Object(a.g)("DropdownWidget|Failed to set %{issuableAttribute} on this %{issuableType}. Please try again."),{issuableAttribute:e,issuableType:i}),listFetchError:Object(a.h)(Object(a.g)("DropdownWidget|Failed to fetch the %{issuableAttribute} for this %{issuableType}. Please try again."),{issuableAttribute:e,issuableType:i}),currentFetchError:Object(a.h)(Object(a.g)("DropdownWidget|An error occurred while fetching the assigned %{issuableAttribute} of the selected %{issuableType}."),{issuableAttribute:e,issuableType:i})}}},"9d0U":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestTodos"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"currentUserTodos"},arguments:[{kind:"Argument",name:{kind:"Name",value:"state"},value:{kind:"EnumValue",value:"pending"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:289}};n.loc.source={body:"query mergeRequestTodos($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: mergeRequest(iid: $iid) {\n      __typename\n      id\n      currentUserTodos(state: pending) {\n        nodes {\n          id\n        }\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestTodos=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestTodos")},AHEt:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueTimeTracking"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"humanTimeEstimate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"humanTotalTimeSpent"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timeEstimate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"totalTimeSpent"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:283}};n.loc.source={body:"query issueTimeTracking($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: issue(iid: $iid) {\n      __typename\n      id\n      humanTimeEstimate\n      humanTotalTimeSpent\n      timeEstimate\n      totalTimeSpent\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issueTimeTracking=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issueTimeTracking")},Bml2:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicSubscribed"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"emailsDisabled"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:219}};n.loc.source={body:"query epicSubscribed($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    __typename\n    id\n    emailsDisabled\n    issuable: epic(iid: $iid) {\n      __typename\n      id\n      subscribed\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicSubscribed=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicSubscribed")},Dwpb:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestMilestone"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"attribute"},name:{kind:"Name",value:"milestone"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"MilestoneFragment"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:311}};a.loc.source={body:'#import "./milestone.fragment.graphql"\n\nquery mergeRequestMilestone($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: mergeRequest(iid: $iid) {\n      __typename\n      id\n      attribute: milestone {\n        ...MilestoneFragment\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("ET+c").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.mergeRequestMilestone=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"mergeRequestMilestone")},EPAg:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"issuableTodoCreate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"TodoCreateInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"todoMutation"},name:{kind:"Name",value:"todoCreate"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"todo"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:158}};n.loc.source={body:"mutation issuableTodoCreate($input: TodoCreateInput!) {\n  todoMutation: todoCreate(input: $input) {\n    __typename\n    todo {\n      id\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issuableTodoCreate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issuableTodoCreate")},"ET+c":function(e,i){var n={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"MilestoneFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Milestone"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"webUrl"},name:{kind:"Name",value:"webPath"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"expired"},arguments:[],directives:[]}]}}],loc:{start:0,end:95}};n.loc.source={body:"fragment MilestoneFragment on Milestone {\n  id\n  title\n  webUrl: webPath\n  dueDate\n  expired\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};e.exports=n},"GSV/":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueDueDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDate"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:202}};n.loc.source={body:"query issueDueDate($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: issue(iid: $iid) {\n      __typename\n      id\n      dueDate\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issueDueDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issueDueDate")},IuCd:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:276}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nquery epicLabels($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    issuable: epic(iid: $iid) {\n      id\n      labels {\n        nodes {\n          ...Label\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.epicLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"epicLabels")},KGGv:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:423}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery issueAssignees($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: issue(iid: $iid) {\n      __typename\n      id\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.issueAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"issueAssignees")},MHQH:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"mergeRequestSetSubscription"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"subscribedState"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableSubscription"},name:{kind:"Name",value:"mergeRequestSetSubscription"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}},{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"subscribedState"},value:{kind:"Variable",name:{kind:"Name",value:"subscribedState"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:325}};n.loc.source={body:"mutation mergeRequestSetSubscription($fullPath: ID!, $iid: String!, $subscribedState: Boolean!) {\n  updateIssuableSubscription: mergeRequestSetSubscription(\n    input: { projectPath: $fullPath, iid: $iid, subscribedState: $subscribedState }\n  ) {\n    issuable: mergeRequest {\n      id\n      subscribed\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestSetSubscription=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestSetSubscription")},MIX8:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueConfidential"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"confidential"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:212}};n.loc.source={body:"query issueConfidential($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: issue(iid: $iid) {\n      __typename\n      id\n      confidential\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issueConfidential=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issueConfidential")},MPHe:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:284}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nquery issueLabels($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid) {\n      id\n      labels {\n        nodes {\n          ...Label\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.issueLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"issueLabels")},ND1Y:function(e,i){var n={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"UserAvailability"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"User"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"status"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"availability"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:139}};n.loc.source={body:"# eslint-disable-next-line @graphql-eslint/require-id-when-available\nfragment UserAvailability on User {\n  status {\n    availability\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};e.exports=n},"NM/P":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateIssueDueDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateIssueInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetDate"},name:{kind:"Name",value:"updateIssue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDate"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:173}};n.loc.source={body:"mutation updateIssueDueDate($input: UpdateIssueInput!) {\n  issuableSetDate: updateIssue(input: $input) {\n    issuable: issue {\n      id\n      dueDate\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.updateIssueDueDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"updateIssueDueDate")},Ngt0:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueSubscribed"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"emailsDisabled"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:229}};n.loc.source={body:"query issueSubscribed($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: issue(iid: $iid) {\n      __typename\n      id\n      subscribed\n      emailsDisabled\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issueSubscribed=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issueSubscribed")},PEAp:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicConfidential"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"confidential"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:204}};n.loc.source={body:"query epicConfidential($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: epic(iid: $iid) {\n      __typename\n      id\n      confidential\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicConfidential=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicConfidential")},QVnT:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"alertAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"domain"}},type:{kind:"NamedType",name:{kind:"Name",value:"AlertManagementDomainFilter"}},defaultValue:{kind:"EnumValue",value:"threat_monitoring"},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"alertManagementAlert"},arguments:[{kind:"Argument",name:{kind:"Name",value:"domain"},value:{kind:"Variable",name:{kind:"Name",value:"domain"}}},{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"iid"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:488}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery alertAssignees(\n  $domain: AlertManagementDomainFilter = threat_monitoring\n  $fullPath: ID!\n  $iid: String!\n) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: alertManagementAlert(domain: $domain, iid: $iid) {\n      iid\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.alertAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"alertAssignees")},QYdl:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueTimeTrackingReport"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"id"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"IssueID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"id"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timelogs"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"TimelogFragment"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:257}};a.loc.source={body:'#import "~/graphql_shared/fragments/issuable_timelogs.fragment.graphql"\n\nquery issueTimeTrackingReport($id: IssueID!) {\n  issuable: issue(id: $id) {\n    __typename\n    id\n    title\n    timelogs {\n      nodes {\n        ...TimelogFragment\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("w9Yc").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.issueTimeTrackingReport=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"issueTimeTrackingReport")},RWen:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"issueSetAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetAssignees"},name:{kind:"Name",value:"issueSetAssignees"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"assigneeUsernames"},value:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}}},{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:504}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nmutation issueSetAssignees($iid: String!, $assigneeUsernames: [String!]!, $fullPath: ID!) {\n  issuableSetAssignees: issueSetAssignees(\n    input: { iid: $iid, assigneeUsernames: $assigneeUsernames, projectPath: $fullPath }\n  ) {\n    issuable: issue {\n      id\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.issueSetAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"issueSetAssignees")},TgHV:function(e,i){var n={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"Author"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"User"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"avatarUrl"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"username"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"webUrl"},arguments:[],directives:[]}]}}],loc:{start:0,end:72}};n.loc.source={body:"fragment Author on User {\n  id\n  avatarUrl\n  name\n  username\n  webUrl\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};e.exports=n},U0nB:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"projectLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"searchTerm"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[{kind:"Argument",name:{kind:"Name",value:"searchTerm"},value:{kind:"Variable",name:{kind:"Name",value:"searchTerm"}}},{kind:"Argument",name:{kind:"Name",value:"includeAncestorGroups"},value:{kind:"BooleanValue",value:!0}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:289}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nquery projectLabels($fullPath: ID!, $searchTerm: String) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    labels(searchTerm: $searchTerm, includeAncestorGroups: true) {\n      nodes {\n        ...Label\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.projectLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"projectLabels")},V85p:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mrTimeTrackingReport"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"id"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"MergeRequestID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"id"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timelogs"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"TimelogFragment"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:268}};a.loc.source={body:'#import "~/graphql_shared/fragments/issuable_timelogs.fragment.graphql"\n\nquery mrTimeTrackingReport($id: MergeRequestID!) {\n  issuable: mergeRequest(id: $id) {\n    __typename\n    id\n    title\n    timelogs {\n      nodes {\n        ...TimelogFragment\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("w9Yc").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.mrTimeTrackingReport=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"mrTimeTrackingReport")},VW3Q:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueParticipants"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"participants"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:429}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery issueParticipants($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: issue(iid: $iid) {\n      __typename\n      id\n      participants {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.issueParticipants=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"issueParticipants")},ZMa4:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateEpicStartDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateEpicInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetDate"},name:{kind:"Name",value:"updateEpic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateIsFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateFromMilestones"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:231}};n.loc.source={body:"mutation updateEpicStartDate($input: UpdateEpicInput!) {\n  issuableSetDate: updateEpic(input: $input) {\n    issuable: epic {\n      id\n      startDateIsFixed\n      startDateFixed\n      startDateFromMilestones\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.updateEpicStartDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"updateEpicStartDate")},adGk:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"projectIssueMilestone"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"attribute"},name:{kind:"Name",value:"milestone"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"MilestoneFragment"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:304}};a.loc.source={body:'#import "./milestone.fragment.graphql"\n\nquery projectIssueMilestone($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: issue(iid: $iid) {\n      __typename\n      id\n      attribute: milestone {\n        ...MilestoneFragment\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("ET+c").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.projectIssueMilestone=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"projectIssueMilestone")},bc8f:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateEpicLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateEpicInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableLabels"},name:{kind:"Name",value:"updateEpic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:288}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nmutation updateEpicLabels($input: UpdateEpicInput!) {\n  updateIssuableLabels: updateEpic(input: $input) {\n    issuable: epic {\n      id\n      labels {\n        nodes {\n          ...Label\n        }\n      }\n    }\n    errors\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.updateEpicLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"updateEpicLabels")},bpen:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueTodos"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"currentUserTodos"},arguments:[{kind:"Argument",name:{kind:"Name",value:"state"},value:{kind:"EnumValue",value:"pending"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:275}};n.loc.source={body:"query issueTodos($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: issue(iid: $iid) {\n      __typename\n      id\n      currentUserTodos(state: pending) {\n        nodes {\n          id\n        }\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issueTodos=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issueTodos")},csG4:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"getMrParticipants"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"participants"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:404}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery getMrParticipants($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: mergeRequest(iid: $iid) {\n      id\n      participants {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.getMrParticipants=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"getMrParticipants")},"eO/Q":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicTodos"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"currentUserTodos"},arguments:[{kind:"Argument",name:{kind:"Name",value:"state"},value:{kind:"EnumValue",value:"pending"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:266}};n.loc.source={body:"query epicTodos($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: epic(iid: $iid) {\n      __typename\n      id\n      currentUserTodos(state: pending) {\n        nodes {\n          id\n        }\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicTodos=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicTodos")},es8a:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"projectIssueSetSubscription"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"subscribedState"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableSubscription"},name:{kind:"Name",value:"issueSetSubscription"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}},{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"subscribedState"},value:{kind:"Variable",name:{kind:"Name",value:"subscribedState"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:311}};n.loc.source={body:"mutation projectIssueSetSubscription($fullPath: ID!, $iid: String!, $subscribedState: Boolean!) {\n  updateIssuableSubscription: issueSetSubscription(\n    input: { projectPath: $fullPath, iid: $iid, subscribedState: $subscribedState }\n  ) {\n    issuable: issue {\n      id\n      subscribed\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.projectIssueSetSubscription=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"projectIssueSetSubscription")},"il++":function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"issueSetLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateIssueInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableLabels"},name:{kind:"Name",value:"updateIssue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:289}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nmutation issueSetLabels($input: UpdateIssueInput!) {\n  updateIssuableLabels: updateIssue(input: $input) {\n    issuable: issue {\n      id\n      labels {\n        nodes {\n          ...Label\n        }\n      }\n    }\n    errors\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.issueSetLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"issueSetLabels")},iuSE:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"projectMilestones"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"title"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"state"}},type:{kind:"NamedType",name:{kind:"Name",value:"MilestoneStateEnum"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"attributes"},name:{kind:"Name",value:"milestones"},arguments:[{kind:"Argument",name:{kind:"Name",value:"searchTitle"},value:{kind:"Variable",name:{kind:"Name",value:"title"}}},{kind:"Argument",name:{kind:"Name",value:"state"},value:{kind:"Variable",name:{kind:"Name",value:"state"}}},{kind:"Argument",name:{kind:"Name",value:"sort"},value:{kind:"EnumValue",value:"EXPIRED_LAST_DUE_DATE_ASC"}},{kind:"Argument",name:{kind:"Name",value:"first"},value:{kind:"IntValue",value:"20"}},{kind:"Argument",name:{kind:"Name",value:"includeAncestors"},value:{kind:"BooleanValue",value:!0}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"MilestoneFragment"},directives:[]},{kind:"Field",name:{kind:"Name",value:"state"},arguments:[],directives:[]}]}}]}}]}}]}}],loc:{start:0,end:434}};a.loc.source={body:'#import "./milestone.fragment.graphql"\n\nquery projectMilestones($fullPath: ID!, $title: String, $state: MilestoneStateEnum) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    attributes: milestones(\n      searchTitle: $title\n      state: $state\n      sort: EXPIRED_LAST_DUE_DATE_ASC\n      first: 20\n      includeAncestors: true\n    ) {\n      nodes {\n        ...MilestoneFragment\n        state\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("ET+c").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.projectMilestones=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"projectMilestones")},lUSz:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"mergeRequestSetMilestone"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"attributeId"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetAttribute"},name:{kind:"Name",value:"mergeRequestSetMilestone"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}},{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"milestoneId"},value:{kind:"Variable",name:{kind:"Name",value:"attributeId"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"attribute"},name:{kind:"Name",value:"milestone"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"state"},arguments:[],directives:[]}]}}]}}]}}]}}],loc:{start:0,end:386}};n.loc.source={body:"mutation mergeRequestSetMilestone($fullPath: ID!, $iid: String!, $attributeId: ID) {\n  issuableSetAttribute: mergeRequestSetMilestone(\n    input: { projectPath: $fullPath, iid: $iid, milestoneId: $attributeId }\n  ) {\n    __typename\n    errors\n    issuable: mergeRequest {\n      __typename\n      id\n      attribute: milestone {\n        title\n        id\n        state\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestSetMilestone=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestSetMilestone")},m9sB:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:299}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nquery mergeRequestLabels($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: mergeRequest(iid: $iid) {\n      id\n      labels {\n        nodes {\n          ...Label\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.mergeRequestLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"mergeRequestLabels")},mawF:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestSubscribed"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:223}};n.loc.source={body:"query mergeRequestSubscribed($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: mergeRequest(iid: $iid) {\n      __typename\n      id\n      subscribed\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestSubscribed=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestSubscribed")},mpzd:function(e,i,n){"use strict";n.d(i,"a",(function(){return t})),n.d(i,"b",(function(){return d})),n.d(i,"c",(function(){return r})),n.d(i,"d",(function(){return l})),n.d(i,"e",(function(){return s}));var a=n("t9l/");const t={Closed:"closed",Open:"opened",Reopened:"reopened"},d={[t.Closed]:Object(a.a)("Closed"),[t.Open]:Object(a.a)("Open"),[t.Reopened]:Object(a.a)("Open")},r={Issue:"issue",Epic:"epic",MergeRequest:"merge_request",Alert:"alert"},l={Issue:"issue",Incident:"incident",TestCase:"test_case"},s={project:"project",group:"group"}},mxyH:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestTimeTracking"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"humanTimeEstimate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"humanTotalTimeSpent"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timeEstimate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"totalTimeSpent"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:298}};n.loc.source={body:"query mergeRequestTimeTracking($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: mergeRequest(iid: $iid) {\n      __typename\n      id\n      humanTimeEstimate\n      humanTotalTimeSpent\n      timeEstimate\n      totalTimeSpent\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestTimeTracking=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestTimeTracking")},nQ35:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"alertSetAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetAssignees"},name:{kind:"Name",value:"alertSetAssignees"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"assigneeUsernames"},value:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}}},{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"alert"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"iid"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}},{kind:"Field",name:{kind:"Name",value:"notes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"AlertNote"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:652}};a.loc.source={body:'#import "~/graphql_shared/fragments/alert_note.fragment.graphql"\n#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nmutation alertSetAssignees($fullPath: ID!, $assigneeUsernames: [String!]!, $iid: String!) {\n  issuableSetAssignees: alertSetAssignees(\n    input: { iid: $iid, assigneeUsernames: $assigneeUsernames, projectPath: $fullPath }\n  ) {\n    errors\n    issuable: alert {\n      iid\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n      notes {\n        nodes {\n          ...AlertNote\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("1XfR").definitions)),a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.alertSetAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"alertSetAssignees")},pKR4:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestReference"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"reference"},arguments:[{kind:"Argument",name:{kind:"Name",value:"full"},value:{kind:"BooleanValue",value:!0}}],directives:[]}]}}]}}]}}],loc:{start:0,end:233}};n.loc.source={body:"query mergeRequestReference($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: mergeRequest(iid: $iid) {\n      __typename\n      id\n      reference(full: true)\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestReference=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestReference")},paIi:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueReference"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"reference"},arguments:[{kind:"Argument",name:{kind:"Name",value:"full"},value:{kind:"BooleanValue",value:!0}}],directives:[]}]}}]}}]}}],loc:{start:0,end:218}};n.loc.source={body:"query issueReference($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    __typename\n    issuable: issue(iid: $iid) {\n      __typename\n      id\n      reference(full: true)\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issueReference=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issueReference")},sJJu:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"getMrAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:398}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery getMrAssignees($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: mergeRequest(iid: $iid) {\n      id\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.getMrAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"getMrAssignees")},sg9S:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateEpicDueDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateEpicInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetDate"},name:{kind:"Name",value:"updateEpic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateIsFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateFromMilestones"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:223}};n.loc.source={body:"mutation updateEpicDueDate($input: UpdateEpicInput!) {\n  issuableSetDate: updateEpic(input: $input) {\n    issuable: epic {\n      id\n      dueDateIsFixed\n      dueDateFixed\n      dueDateFromMilestones\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.updateEpicDueDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"updateEpicDueDate")},tB5k:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicParticipants"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"participants"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:420}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery epicParticipants($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: epic(iid: $iid) {\n      __typename\n      id\n      participants {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.epicParticipants=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"epicParticipants")},tSSo:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"groupLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"searchTerm"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[{kind:"Argument",name:{kind:"Name",value:"searchTerm"},value:{kind:"Variable",name:{kind:"Name",value:"searchTerm"}}},{kind:"Argument",name:{kind:"Name",value:"onlyGroupLabels"},value:{kind:"BooleanValue",value:!0}},{kind:"Argument",name:{kind:"Name",value:"includeAncestorGroups"},value:{kind:"BooleanValue",value:!0}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:308}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nquery groupLabels($fullPath: ID!, $searchTerm: String) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    labels(searchTerm: $searchTerm, onlyGroupLabels: true, includeAncestorGroups: true) {\n      nodes {\n        ...Label\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.groupLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"groupLabels")},w9Yc:function(e,i){var n={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"TimelogFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Timelog"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"timeSpent"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"user"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"spentAt"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"note"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"body"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"summary"},arguments:[],directives:[]}]}}],loc:{start:0,end:130}};n.loc.source={body:"fragment TimelogFragment on Timelog {\n  timeSpent\n  user {\n    id\n    name\n  }\n  spentAt\n  note {\n    id\n    body\n  }\n  summary\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};e.exports=n},wMWn:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"subscription",name:{kind:"Name",value:"issuableAssigneesUpdated"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"issuableId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"IssuableID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"issuableAssigneesUpdated"},arguments:[{kind:"Argument",name:{kind:"Name",value:"issuableId"},value:{kind:"Variable",name:{kind:"Name",value:"issuableId"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"InlineFragment",typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Issue"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"Field",name:{kind:"Name",value:"status"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"availability"},arguments:[],directives:[]}]}}]}}]}}]}}]}}]}}],loc:{start:0,end:346}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n\nsubscription issuableAssigneesUpdated($issuableId: IssuableID!) {\n  issuableAssigneesUpdated(issuableId: $issuableId) {\n    ... on Issue {\n      id\n      assignees {\n        nodes {\n          ...User\n          status {\n            availability\n          }\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("yXJ/").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.issuableAssigneesUpdated=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"issuableAssigneesUpdated")},wSUX:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicReference"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"reference"},arguments:[{kind:"Argument",name:{kind:"Name",value:"full"},value:{kind:"BooleanValue",value:!0}}],directives:[]}]}}]}}]}}],loc:{start:0,end:210}};n.loc.source={body:"query epicReference($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    __typename\n    id\n    issuable: epic(iid: $iid) {\n      __typename\n      id\n      reference(full: true)\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicReference=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicReference")},y9w6:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"projectIssueMilestoneMutation"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"attributeId"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetAttribute"},name:{kind:"Name",value:"updateIssue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}},{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"milestoneId"},value:{kind:"Variable",name:{kind:"Name",value:"attributeId"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"attribute"},name:{kind:"Name",value:"milestone"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"state"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"expired"},arguments:[],directives:[]}]}}]}}]}}]}}],loc:{start:0,end:387}};n.loc.source={body:"mutation projectIssueMilestoneMutation($fullPath: ID!, $iid: String!, $attributeId: ID) {\n  issuableSetAttribute: updateIssue(\n    input: { projectPath: $fullPath, iid: $iid, milestoneId: $attributeId }\n  ) {\n    __typename\n    errors\n    issuable: issue {\n      __typename\n      id\n      attribute: milestone {\n        title\n        id\n        state\n        expired\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.projectIssueMilestoneMutation=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"projectIssueMilestoneMutation")}}]);
//# sourceMappingURL=15.d9f2ff8f.chunk.js.map